import sys
import argparse
from random import randint

def parse_commandline(argument_list : str) -> argparse.Namespace:
    parser = argparse.ArgumentParser(description='specsim: simulate NMR spectral simulator')
    parser.add_argument('-fid', type=str, default='test.fid', help='NMRPipe-format Time-Domain Input.')
    parser.add_argument('-ft', type=str, default='test.ft1', help='Corresponding NMRPipe-format Freq-Domain Input.')
    parser.add_argument('-apod', type=str, default=None, help='Optional NMRPipe-format Apodization Profile.')
    parser.add_argument('-out', type=str, default=None, help='NMRPipe-format Time-Domain Output, or Keyword None.')
    parser.add_argument('-res', type=str, default=None, help='NMRPipe-format Time-Domain Residual, or Keyword None.')
    parser.add_argument('-rx1', type=int, default=0, help='First Point Location for Calculating Residual.')
    parser.add_argument('-rxn', type=int, default=0, help='Last Point Location for Calculating Residual.')
    parser.add_argument('-trials', type=int, default=0, help='Number of Optimization Trials.')
    parser.add_argument('-maxFail', type=int, default=0, help='Max Optimization Fails Before Quitting.')
    parser.add_argument('-iseed', type=int, default=randint(1, sys.maxsize), help='Random Number Seed.')
    parser.add_argument('-verb', action='store_true', help='Verbose Mode ON (Default).')
    parser.add_argument('-noverb', action='store_true', help='Verbose Mode OFF.')
    parser.add_argument('-report', action='store_true', help='Report Mode ON.')
    parser.add_argument('-freq', type=float, nargs='+', default=None, help='Frequency Positions (list of floats).')
    parser.add_argument('-eDecay', type=float, nargs='+', default=None, help='Exponential Decays (list of floats).')
    parser.add_argument('-eAmp', type=str, default='Auto', help='Exponential Amplitudes, or Keyword Auto.')
    parser.add_argument('-gDecay', type=str, default=None, help='Gaussian Decays (Pts Hz ppm %%).')
    parser.add_argument('-gAmp', type=str, default='Auto', help='Gaussian Amplitudes, or Keyword Auto.')
    parser.add_argument('-j1', type=str, default=None, help='Coupling 1 (Cosine Modulation, Pts Hz ppm %%).')
    parser.add_argument('-j2', type=str, default=None, help='Coupling 2 (Cosine Modulation, Pts Hz ppm %%).')
    parser.add_argument('-j3', type=str, default=None, help='Coupling 3 (Cosine Modulation, Pts Hz ppm %%).')
    parser.add_argument('-p0', type=float, default=0.0, help='Zero Order Phase of All Signals.')
    parser.add_argument('-p1', type=float, default=0.0, help='First Order Phase of All Signals.')
    parser.add_argument('-ePhase', type=float, default=0.0, help='Additional Phase for Each Exponential Signal.')
    parser.add_argument('-gPhase', type=float, default=0.0, help='Additional Phase for Each Gaussian Signal.')
    parser.add_argument('-ts', action='store_true', help='Scale Time-Domain Signal by Decay Integral.')
    parser.add_argument('-nots', action='store_true', help='No Time-Domain Scale (Default).')
    parser.add_argument('-notdd', action='store_true', help='Interpret Linewidth in Frequency Domain (Default).')
    parser.add_argument('-tdd', action='store_true', help='Interpret Linewidth as Time Domain Decay.')
    parser.add_argument('-tdj', action='store_true', help='Interpret J-Modulation in Time Domain (Default).')
    parser.add_argument('-notdj', action='store_true', help='Interpret J-Modulation in Frequency Domain.')

    return parser.parse_args(argument_list)